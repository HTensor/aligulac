# Requires
#   coffee-script (npm install coffee-script) <- will fail silently without it
#   uglifyjs      (installed and in PATH)
#   stitch        (npm install stitch)
#   ncp           (npm install ncp)

fs = require 'fs'
stitch  = require('stitch');

{spawn} = require 'child_process'
{ncp} = require 'ncp'

target_dir = '../js/'
deploy_dir = 'deploy/'
build_dir = 'build/'
src_dir = 'src/'

target_file_name = 'aligulac'


create_package = () ->
    if not fs.existsSync deploy_dir
        fs.mkdirSync deploy_dir
    pckage = stitch.createPackage({
      paths: [__dirname + '/src']
    })

    pckage.compile (err, source) ->
        fs.writeFile("#{deploy_dir}#{target_file_name}.js", source, (err) ->
            if err
                throw err
            console.log "Compiled #{target_file_name}.js package"
        )

js_file_regex = ///.*\.js$///
get_files = (dir, callback) ->
    fs.readdir dir, (err, files) ->
        callback (dir + file for file in files when file.match(js_file_regex)?)

log = (msg) ->
    console.log msg

build = (callback) ->
    log "Building..."
    create_package()

deploy = (callback) ->
    invoke 'build'
    "Deploying..."
    if not fs.existsSync deploy_dir
        fs.mkdirSync deploy_dir

    f = deploy_dir + target_file_name
    uglify = spawn 'uglifyjs', ['-m', '-c', '-o', f + '.min.js', f + '.js']
    uglify.stderr.on 'data', (data) ->
        process.stderr.write data.toString()
    uglify.on 'exit', (code) ->
        log "Uglyify done."
        invoke 'copy'

copy = () ->
    log "Copying..."
    ncp deploy_dir, target_dir, (err) ->
        if err?
            log err
        else
            log "Done!"

task 'build', 'build all coffee files', (options) ->
    build()

task 'copy', 'copies files from deploy to target', (options) ->
    copy()

task 'deploy', 'build and combine all coffee files', (options) ->
    deploy()

task 'clean', 'remove all compiled files', (options) ->
    rm = spawn 'rm', ['-r', deploy_dir, build_dir]
