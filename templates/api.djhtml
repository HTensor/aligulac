{% extends "index.djhtml" %}

{% load ratings_extras %}
{% load formulation %}
{% load i18n %}

{% block title %}API documentation{% endblock %}

{% block modals %}
  <div class="modal fade" id="md-apikey" tabindex="-1" role="dialog" aria-labelledby="md-apikey-label"
       aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h4 class="modal-title" id="md-apikey-label">
            Generate API key
          </h4>
        </div>
        {% form "forms.djhtml" %}
          <form role="form" method="post" action="/about/api/">
            <div class="modal-body">
              {% csrf_token %}
              {% field "basic" form.organization %}
              {% field "basic" form.contact %}
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
              {% use "submit" %}
            </div>
          </form>
          {% endform %}
      </div>
    </div>
  </div>
{% endblock %}

{% block content %}
  <div class="row">
    <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1 col-sm-12 col-xs-12 text">
      <h2>API documentation</h2>
    </div>
  </div>

  {% include "messages.djhtml" %}

  <div class="row">
    <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1 col-sm-12 col-xs-12 text">
      <h3>API access key</h3>

      <p>To use the Aligulac API you first need an API access key. To generate one, please use the button below. You will have to provide your name (or the name of the organization), and a contact e-mail address.</p>

      <p>If the request is successful, you will be provided with a 20-character random string. This string will have to be passed with every API request you make as a parameter named <code>apikey</code>. In the rest of this document, this parameter will be implied.</p>

      <p>
        <div class="text-center">
          <button class="btn btn-primary" data-toggle="modal" data-target="#md-apikey">
            Generate API key
          </button>
        </div>
      </p>

      <h3>API overview</h3>

      <p>The API is for the most part self-documenting. The root URI is <code>/api/v1/</code>. Requests to this URI will return a JSON object describing the available resources and their root URIs, e.g.</p>

      <pre>{
    "period": {
        "list_endpoint": "/api/v1/period/",
        "schema": "/api/v1/period/schema/"
    },
    "player" : {
        "list_endpoint": "/api/v1/player/",
        "schema": "/api/v1/player/schema/"
    }
}</pre>

      <p><strong>NOTE:</strong> For making requests in the browser, please append <code>?format=json</code> to the URI.</p>

      <p>The resources available correspond for the most part to the tables in the database, which are described <a href="/about/db/">here</a>. In addition to these, we have API access to predictions as well, described below.</p>

      <p>Requests for player objects thus need to go to <code>/api/v1/player/</code>. For a detailed description of each resource, go to the schema URI. This will return a JSON object with the following fields:</p>

      <ul>
        <li><strong>allowed_detail_http_methods</strong> and <strong>allowed_list_http_methods</strong>: list of accepted HTTP methods (should always be <code>get</code> and <code>post</code>).</li>
        <li><strong>default_format</strong>: default reply format (should always be <code>application/json</code>).</li>
        <li><strong>default_limit</strong>: default page limit when grabbing many objects at once.</li>
        <li><strong>fields</strong>: A dictionary describing each field of the given resource, with the following information:
          <ul>
            <li><strong>nullable</strong>:  <code>true</code> if the field can be <code>null</code>, <code>false</code> otherwise.</li>
            <li><strong>type</strong>: Field type (e.g. <code>string</code>, <code>integer</code>, <code>float</code>, <code>datetime</code> etc.). For related objects of another type, this field will read <code>related</code></li>
            <li><strong>default</strong>: Default value, if any (usually not).</li>
            <li><strong>help_text</strong>: Additional human-readable information.</li>
          </ul>
          {% trans "The other fields are not of interest." %}</li>
        <li><strong>filtering</strong>: A dictionary describing the filters available on each field. For each field, this is either a list of filters, the integer <code>1</code> (all filters available), or the integer <code>2</code> (all filters available, including related objects). With very few exceptions, all kinds of filters are allowed.</li>
        <li><strong>ordering</strong>: A list of fields that allow sorting. With very few exceptions, this will be all fields.</li>
      </ul>

      <h3>Getting all objects</h3>

      <p>To obtain all objects of a given resource, just make a request to the base resource URI, e.g.  <code>/api/v1/period/</code>. This will return a JSON object with two fields: <strong>meta</strong>, giving paging information, and <strong>objects</strong>, which is a list of objects. By default, this will return a limited number of objects per page (normally 20). To control the page size and offset, give the <code>limit</code> and <code>offset</code> arguments, e.g.</p>

      <pre>/api/v1/period?limit=50&amp;offset=100</pre>

      <p>will return objects number 100-149. In addition, the <strong>meta</strong> field gives you the URIs for the next and previous pages, as well as the total count of objects.</p>

      <p>You can get all objects at once by giving <code>limit=0</code>, but this is disallowed on some resources and otherwise not encouraged.</p>

      <h3>Getting a single object by ID</h3>

      <p>If you know the id of the object you are interested in, you can get it directly. For example, to get Leenock's player information, go to <code>/api/v1/player/1/</code>, since Leenock's id is <code>1</code>.</p>

      <p>This will return just the object directly, with no metadata and no surrounding list.</p>

      <h3>Getting several objects by ID</h3>

      <p>If you want to access more than one object, you can request them as a <strong>set</strong> to save both us and yourself from extra work. If you are interested in Leenock, Creator and Life (ids 1, 2 and 3), you can make a request to</p>

      <pre>/api/v1/player/set/1;2;3/</pre>

      <h3>Related objects</h3>

      <p>Fields that point to related objects will usually be given by resource URIs in the returned objects. For frequently useful information (e.g. players' current rating), the related object(s) will be given as well, although they are often stripped-down versions without detailed information.</p>

      <h3>Filtering</h3>

      <p>You can apply filters to the base URI. They are applied in the following manner:</p>

      <pre>/api/v1/resourcename/?fieldname__filtername=value</pre>

      <p>If filtering on related objects is available, this can be done as follows:</p>

      <pre>/api/v1/resourcename/?relatedobject__fieldname__filtername=value</pre>

      <p>In principle, these chains can be arbitrarily long. The available filters correspond to those found in <a href="https://docs.djangoproject.com/en/1.6/ref/models/querysets/#field-lookups">Django</a>. Here is a brief overview:</p>

      <ul>
        <li><strong>exact, iexact</strong>:
          Exact lookup (can also be done just as <code>fieldname=value</code>) or case-insensitive matching for strings.</li>
        <li><strong>contains, icontains</strong>:
          Case sensitive or insensitive string containment.</li>
        <li><strong>startswith, istartswith, endswith, iendswith</strong>:
          Case sensitive or insensitive string prefix or postfix matching.</li>
        <li><strong>regex, iregex</strong>:
          Case sensitive or insensitive regular expression matching. The regular expression syntax is defined by Python's <code>re</code> module.</li>
        <li><strong>in</strong>:
          The given field value must be an element of the provided comma-separated list.</li>
        <li><strong>gt, gte, lt, lte</strong>:
          Numerical orderings &gt;, ≥, &lt; and ≤.</li>
        <li><strong>range</strong>:
          The given field value must lie between the given values (separated by a comma). Useful for dates.</li>
        <li><strong>year, month, day, week_day</strong>:
          Applies to date fields, matches only on the specified integer value. Months and week days are numbered from 1, and the week is assumed to start on Sunday.</li>
        <li><strong>isnull</strong>:
          Takes a boolean, will only match objects where the given field is or is not null.</li>
      </ul>

      <p><strong>NOTE:</strong> Filtering by events works differently. See <a href="#common">common use cases</a>.</p>

      <h3>Ordering</h3>

      <p>To sort by a field, add the parameter <code>order_by=fieldname</code> for ascending order, and <code>order_by=-fieldname</code> for descending order.</p>

      <h2>Prediction requests</h2>

      <p>Requests for predictions do not correspond to the database, and work a little differently, but corresponds more or less exactly to the way the <a href="/inference/">prediction page</a> works. We currently support five different formats:</p>

      <ul>
        <li><strong>Single best-of-N matches</strong> (<code>predictmatch</code>)</li>
        <li><strong>Dual tournaments</strong> (<code>predictdual</code>), 
          also called GSL-style groups</li>
        <li><strong>Single-elimination brackets</strong> (<code>predictsebracket</code>)</li>
        <li><strong>Round-robin groups</strong> (<code>predictrrgroup</code>)</li>
        <li><strong>Proleague-style team matches</strong> (<code>predictproleague</code>)</li>
      </ul>

      <p>The URI for match prediction is then <code>/api/v1/predictmatch/id1,id2/</code>, where <code>id1</code> and <code>id2</code> are the ids for the two players. You also have to supply a <code>bo</code> parameter denoting the match length, and this has to be a positive odd integer. The following conditions apply.</p>

      <ul>
        <li>For single matches, you must provide exactly two players.</li>
        <li>For dual tournaments, you must provide exactly four players.</li>
        <li>For single elimination brackets, you must provide a number of players that is a power of two.</li>
        <li>For proleague matches, you must provide an even number of players, one full team before the other (there does not have to be an odd number of players per team).</li>
        <li>For single elimination, and only for this format, you can give different match lengths for different rounds, just make a comma-separated list with the first round first and the final last.</li>
      </ul>

      <p>You can give id 0 to denote a BYE, and there is no restriction on duplicate players (which can be useful for proleague style to simulate ace matches).</p>

      <p>Requests will return a JSON object containing various information, which you can look through by querying the schema URI. For the last four formats (excluding the single match), the two most important fields are <code>matches</code> and <code>meanres</code>. The former describes the already entered results, and the latter describes the median outcome <em>given the former</em>. Each match has a unique identifier which you can use to prescribe results and update the predictions. E.g. to set match identifier <code>abc</code> to result in 1–3, pass the arguments <code>abc_1=1</code> and <code>abc_2=3</code> with the request.</p>

      <p>It may be difficult to predict in advance which matches will have which identifiers. If you're unsure, make an empty request with no preset results. The returned object will then give identifiers for as many matches as it can. As you fill in results, new matches may become available.</p>

      <p>Unlike the <code>matches</code> list, the <code>meanres</code> always contains predictions to the end of the tournament. For example, with a 16-player single elimination bracket, the <code>meanres</code> list will always contain the full 15 matches, trying to predict who will be in the final. As you enter results, this may disagree with the prediction, and the players in the final may change. Thus, <strong>only the <code>matches</code> list contains “sure” information</strong>.</p>

      <h2>Common use cases</h2>

      <h3>Get the current top ten rating list</h3>

      <p>Current ratings are delivered together with player objects, so this will suffice:</p>

      <pre>/api/v1/player/?current_rating__isnull=false
               &amp;current_rating__decay__lt=4
               &amp;order_by=-current_rating__rating
               &amp;limit=10</pre>

      <p>Null values come before non-null values, so we must filter out the null ratings first. The filter on <code>decay</code> is to only select active players. Alternatively, for a cleaner method, just request for ratings directly.</p>

      <pre>/api/v1/rating/?period=95
               &amp;decay__lt=4
               &amp;order_by=-rating
               &amp;limit=10</pre>

      <p>Note that in this case you have to query for the period you want. There is an alias for <code>rating</code> called <code>activerating</code> which automatically filters away inactive ratings, but otherwise works the same way. So you could use:</p>

      <pre>/api/v1/activerating/?period=95
                     &amp;order_by=-rating
                     &amp;limit=10</pre>

      <h3>Filtering by event</h3>

      <p>You could use the <code>eventobj</code> relation to filter matches by events, but since matches are only assigned to the lowest level event objects, you can't use this to get, say, all WCS matches in 2014. That's because no matches are assigned to event object 23398 (which is WCS 2014), rather they are assigned to subevents.</p>

      <p>For event objects, two meta-relations are available called <code>uplink</code> (which links to higher-level events), and <code>downlink</code> (which links to lower-level events).</p>

      <ul>
        <li><code>uplink__parent</code> is the ancestor event.</li>
        <li><code>downlink__child</code> is the descendant event.</li>
        <li><code>uplink__distance</code> and <code>downlink__distance</code> is the distance between them.</li>
      </ul>

      <p>So to get all WCS matches in 2014 (matches assigned to subevents of the WCS 2014 event), you can use:</p>

      <pre>/api/v1/match/?eventobj__uplink__parent=23398</pre>

      <p>This is also available for event objects, so to get all children and grandchildren of WCS 2014 you can use:</p>

      <pre>/api/v1/event/?uplink__parent=23398
              &amp;distance__range=1,2</pre>

      <p>For these meta-relations you can use the following filters:</p>

      <ul>
        <li>Direct lookup</li>
        <li><strong>gt, gte, lt, lte</strong></li>
        <li><strong>in</strong></li>
        <li><strong>range</strong></li>
      </ul>

      <h3>Get the history between two players</h3>

      <p>This is accomplished by using the <code>in</code> filter
      on the <code>match</code> resource. Let's assume the we want the history between
      {{parting|player}} (id 5) and {{maru|player}} (id 49).</p>

      <pre>/api/v1/match/?pla__in=5,49&plb__in=5,49</pre>

      <h3>Searching by name</h3>

      <p>To facilitate easier searching by name (aliases, etc.) we have a different URL endpoint: <code>/search/json/?q=query</code>. This is the endpoint used by Aligulac's own autocompletion feature, and so it obeys the same rules (e.g. it will search for teams, events and players, and it will be sensitive to things like country names and races). This feature is strictly speaking not part of the API, and so its use does not require an access key.</p>
    </div>
  </div>
{% endblock %}
